name: Reusable Helm Deployment Workflow

on:
  workflow_call:
    inputs:
      environment-name:
        description: 'Name of the target environment (e.g., staging, production).'
        required: true
        type: string
      namespace:
        description: 'Kubernetes namespace for the deployment.'
        required: true
        type: string
      release-name:
        description: 'Helm release name for the deployment.'
        required: true
        type: string
      chart-artifact-name:
        description: 'Name of the Helm chart artifact from the CI workflow.'
        required: true
        type: string
      repo-name:
        description: 'The repository name (owner/repo) to download artifacts from.'
        required: true
        type: string
      run-id:
        description: 'The ID of the CI workflow run to download artifacts from.'
        required: true
        type: string
    secrets:
      GPG_SECRET_KEY:
        description: 'GPG private key for Helm chart verification.'
        required: true
      KUBE_CONFIG:
        description: 'Base64-encoded Kubeconfig file for the target cluster.'
        required: true
      REPO_ACCESS_TOKEN:
        description: 'A GitHub token with read access to the repository artifacts.'
        required: true

# Concurrency group to prevent multiple concurrent deployments to the same environment.
concurrency:
  group: ${{ github.workflow }}-${{ inputs.environment-name }}
  cancel-in-progress: false

jobs:
  plan:
    runs-on: self-hosted
    name: Generate Deployment Plan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure GPG for Helm
        run: |
          echo "${{ secrets.GPG_SECRET_KEY }}" | base64 --decode | gpg --batch --import

      - name: Download Helm Chart & Checksum Artifact
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, runId, artifactName } = ${{ toJSON(inputs) }};
            const { actions } = github;

            const artifacts = await actions.getWorkflowRunArtifacts({
              owner: repo.split('/')[0],
              repo: repo.split('/')[1],
              runId,
            });

            if (artifacts.data.artifacts.length === 0) {
              core.setFailed("No artifacts found from the specified CI run ID.");
              return;
            }

            const artifact = artifacts.data.artifacts.find(a => a.name === artifactName);
            if (!artifact) {
              core.setFailed(`Artifact '${artifactName}' not found.`);
              return;
            }

            const download = await actions.downloadArtifact({
              owner: repo.split('/')[0],
              repo: repo.split('/')[1],
              artifactId: artifact.id,
              extract: true,
            });

      - name: Verify Helm Chart Checksum
        shell: bash
        run: |
          CHART_PACKAGE=$(ls *.tgz)
          echo "Verifying checksum for $CHART_PACKAGE"
          sha256sum --check --status "${CHART_PACKAGE}.sha256"
          echo "Checksum verified successfully!"
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install Python dependencies
        run: pip install -r .github/scripts/release-and-monitor/requirements.txt
        
      - name: Run Helm Diff (Plan) using release.py
        shell: bash
        run: |
          CHART_PACKAGE=$(ls *.tgz)
          echo "Generating diff for Helm chart..."
          python .github/scripts/release-and-monitor/release.py \
            --namespace "${{ inputs.namespace }}" \
            --release-name "${{ inputs.release-name }}" \
            --chart-path "${CHART_PACKAGE}" \
            --values-file "backend/src/main/helm/values/${{ inputs.environment-name }}/${{ inputs.environment-name }}.yaml" \
            --secrets-file "backend/src/main/helm/values/${{ inputs.environment-name }}/${{ inputs.environment-name }}.secrets.yaml" \
            --dry-run \
            > helm_diff_output.txt

      - name: Upload Plan Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-plan-${{ github.run_id }}-${{ inputs.environment-name }}
          path: |
            *.tgz
            *.sha256
            helm_diff_output.txt
            
  apply:
    runs-on: self-hosted
    name: Apply Deployment
    needs: plan
    environment:
      name: ${{ inputs.environment-name }}
      url: https://tekmetric-backend-${{ inputs.environment-name }}.mycompany.com
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure Kubeconfig & GPG
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > "$HOME/.kube/config"
          echo "${{ secrets.GPG_SECRET_KEY }}" | base64 --decode | gpg --batch --import

      - name: Download Plan Artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-plan-${{ github.run_id }}-${{ inputs.environment-name }}
          path: .
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install Python dependencies
        run: pip install -r .github/scripts/release-and-monitor/requirements.txt
          
      - name: Deploy with Helm using release.py
        shell: bash
        env:
          KUBECONFIG: "$HOME/.kube/config"
        run: |
          CHART_PACKAGE=$(ls *.tgz)
          echo "Deploying Helm chart..."
          python .github/scripts/release-and-monitor/release.py \
            --namespace "${{ inputs.namespace }}" \
            --release-name "${{ inputs.release-name }}" \
            --chart-path "${CHART_PACKAGE}" \
            --values-file "backend/src/main/helm/values/${{ inputs.environment-name }}/${{ inputs.environment-name }}.yaml" \
            --secrets-file "backend/src/main/helm/values/${{ inputs.environment-name }}/${{ inputs.environment-name }}.secrets.yaml"

      - name: Output deployment status
        if: success()
        run: echo "Deployment to ${{ inputs.environment-name }} was successful!"
