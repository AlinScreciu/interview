name: 'Publish Helm Chart Action'
description: 'Packages and publishes a Helm chart to ChartMuseum.'

inputs:
  chart-path:
    description: 'The path to the Helm chart directory.'
    required: true
  chartmuseum-url:
    description: 'The URL of the ChartMuseum instance.'
    required: true
  app-version:
    description: 'The full semantic version of the application (e.g., 1.0.1+20250923.abc).'
    required: true
  force:
    description: 'Force push the chart even if it exists.'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Set up Helm
      # This action installs a specific version of Helm into the runner environment.
      uses: azure/setup-helm@v4
      with:
        version: 'v3.13.0'

    - name: Install helm-push plugin
      shell: bash
      # This plugin provides the 'cm-push' command for uploading charts to ChartMuseum.
      # It is installed idempotently to avoid errors on re-runs.
      # See more: https://github.com/chartmuseum/helm-push
      run: |
        if ! helm plugin list | grep -q 'cm-push'; then
          echo "helm-push plugin not found. Installing..."
          helm plugin install https://github.com/chartmuseum/helm-push
        else
          echo "helm-push plugin is already installed."
        fi

    - name: Prepare Helm Versions
      id: versions
      shell: bash
      run: |
        FULL_APP_VERSION="${{ inputs.app-version }}"
        if [ -z "$FULL_APP_VERSION" ]; then
          echo "::error::Input 'app-version' is empty. A valid version is required."
          exit 1
        fi
        
        # The Helm chart 'version' field must be a valid SemVer string and cannot contain
        # build metadata (+). We derive a clean version for the chart package by stripping
        # the metadata, while using the full string for the appVersion field inside the chart.
        CHART_VERSION=$(echo "$FULL_APP_VERSION" | cut -d'+' -f1)

        echo "chart_version=${CHART_VERSION}" >> $GITHUB_OUTPUT
        echo "app_version=${FULL_APP_VERSION}" >> $GITHUB_OUTPUT

        echo "Using Chart Version: ${CHART_VERSION}"
        echo "Using App Version: ${FULL_APP_VERSION}"

    - name: Package Helm Chart
      id: package_chart
      shell: bash
      run: |
        # Package the chart using the derived versions. This command creates the .tgz file.
        helm package ${{ inputs.chart-path }} --version ${{ steps.versions.outputs.chart_version }} --app-version ${{ steps.versions.outputs.app_version }}

        # Reliably determine the packaged chart's filename for the next step.
        CHART_NAME=$(helm show chart ${{ inputs.chart-path }} | grep '^name:' | awk '{print $2}')
        PACKAGE_FILE="${CHART_NAME}-${{ steps.versions.outputs.chart_version }}.tgz"
        
        echo "packaged_chart=${PACKAGE_FILE}" >> $GITHUB_OUTPUT
        echo "Packaged chart to ${PACKAGE_FILE}"

    - name: Push chart using helm-push
      shell: bash
      run: |
        FORCE_FLAG=""
        if [[ "${{ inputs.force }}" == "true" ]]; then
          FORCE_FLAG="--force"
        fi
        helm cm-push ${{ steps.package_chart.outputs.packaged_chart }} ${{ inputs.chartmuseum-url }} $FORCE_FLAG

