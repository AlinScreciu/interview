image:
  name: tekmetric-backend
  repository: ghcr.io/alinscreciu
app:
  name: backend-service
  autoJvmMemory: true
  jvmMemoryPercentage: 75
  mgrPort: 8181
  extraPorts:
    - name: otel-metrics
      containerPort: 9464
      protocol: TCP

podDisruptionBudget:
  minAvailable: 2

replicaCount: 6
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

env:
  SPRING_PROFILES_ACTIVE: "local"

sizeProfile: medium

apm:
  enabled: true
  initContainer:
    repository: "ghcr.io/open-telemetry/opentelemetry-java-instrumentation/opentelemetry-java-instrumentation"
    tag: "latest" # Consider pinning to a specific version in production, e.g., "1.32.0"
    pullPolicy: "IfNotPresent"
  copyCommand:
    - "sh"
    - "-c"
    - "cp /opentelemetry-java-instrumentation.jar /apm/agent.jar"
  agentPath: /apm/agent.jar
  env:
    OTEL_METRICS_EXPORTER: "prometheus"
    OTEL_EXPORTER_PROMETHEUS_PORT: "9464"
    OTEL_SERVICE_NAME: '{{ include "helm.fullname" . }}'
    OTEL_RESOURCE_ATTRIBUTES: "service.namespace={{ .Release.Namespace }}"

livenessProbe:
  enabled: true
  spec:
    httpGet:
      path: /actuator/health/liveness
      port: http-management
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

readinessProbe:
  enabled: true
  spec:
    httpGet:
      path: /actuator/health/readiness
      port: http-management
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

startupProbe:
  enabled: true
  spec:
    httpGet:
      path: /actuator/health/liveness
      port: http-management
    failureThreshold: 30
    periodSeconds: 5

serviceMonitor:
  enabled: true
  labels: {}
  endpoints:
    - port: http-management
      interval: 15s
      scrapeTimeout: 10s
      path: /actuator/prometheus
    - port: otel-metrics
      interval: 15s
      scrapeTimeout: 10s
      path: /metrics

